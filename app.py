import streamlit as st
from wordcloud import WordCloud
import matplotlib.pyplot as plt
from collections import Counter
import re
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
import nltk
import pandas as pd
from transformers import pipeline, AutoTokenizer, AutoModelForSequenceClassification
import torch

# Configuraci칩n inicial
st.set_page_config(page_title="An치lisis Avanzado de Opiniones", layout="wide", page_icon="游늵")
st.title("游늵 Analizador de Opiniones con IA")

# Descargar recursos de NLTK
nltk.download('punkt')
nltk.download('stopwords')

# Cargar modelos de lenguaje (con cach칠 para optimizaci칩n)
@st.cache_resource
def load_models():
    try:
        # Modelo para an치lisis de sentimientos
        sentiment_model = pipeline(
            "sentiment-analysis",
            model="finiteautomata/bertweet-base-sentiment-analysis",
            device=0 if torch.cuda.is_available() else -1
        )
        
        # Modelo para resumen
        summarizer = pipeline(
            "summarization",
            model="facebook/bart-large-cnn",
            device=0 if torch.cuda.is_available() else -1
        )
        
        return sentiment_model, summarizer
    except Exception as e:
        st.error(f"Error cargando modelos: {str(e)}")
        return None, None

sentiment_model, summarizer = load_models()

# Opiniones de ejemplo integradas
opiniones = [
    "Un s칠rum magn칤fico, deja la piel espectacular con un acabado natural, el tono est치 muy bien.",
    "Este producto es maravilloso, minimiza imperfecciones con una sola aplicaci칩n al d칤a.",
    "Es la mejor base si buscas una cobertura muy natural. No se nota que traes algo puesto.",
    "Excelente base buen cubrimiento.",
    "Mi piel es sensible y este producto es el mejor aliado del d칤a a d칤a.",
    "Excelente base buen cubrimiento.",
    "El empaque es terrible, no la volver칠 a comprar porque no sirve el envase.",
    "S칤 se siente una piel diferente despu칠s de usar el producto.",
    "Me gusta mucho c칩mo deja mi piel, es buen producto aunque no me gusta su presentaci칩n.",
    "Me parece buena, pero pienso que huele mucho a alcohol, no s칠 si es normal.",
    "Creo que fue el color que no lo supe elegir, no est치 mal, pero me imaginaba algo m치s.",
    "La base ofrece un acabado mate y aterciopelado que deja la piel lisa.",
    "La base de maquillaje ofrece un acabado muy lindo y natural.",
    "Muy buen producto, solo que dura poco tiempo, por ah칤 unas 5 horas.",
    "Excelente cobertura y precio.",
    "No es para nada grasosa.",
    "El producto es mucho m치s oscuro de lo que aparece en la referencia.",
    "Pens칠 me sentar칤a mejor el n칰mero 8, es muy buena pero noto que toca como poner dos veces.",
    "No me gust칩 su cobertura.",
    "La sensaci칩n en la piel no me gusta, me arde al aplicarla."
]

# Funciones de an치lisis
def clean_text(text):
    text = re.sub(r'[^a-zA-Z치칠칤칩칰침츼칄칈칍칔칌\s]', '', text.lower())
    return ' '.join([word for word in word_tokenize(text) 
                    if word not in stopwords.words('spanish') and len(word) > 2])

def analyze_sentiment(text):
    if sentiment_model is None:
        return "Modelo no disponible", 0.0
    try:
        result = sentiment_model(text[:512])[0]
        return {"POS": "Positivo", "NEG": "Negativo", "NEU": "Neutral"}.get(result['label'], "Neutral"), result['score']
    except:
        return "Error", 0.0

def generate_summary(text):
    if summarizer is None:
        return "Modelo de resumen no disponible"
    try:
        return summarizer(text[:1024], max_length=130, min_length=30, do_sample=False)[0]['summary_text']
    except:
        return "Error generando resumen"

# Interfaz principal
def main():
    tab1, tab2 = st.tabs(["游닇 Analizar Nuevos Comentarios", "游늵 Explorar Opiniones Existentes"])
    
    with tab1:
        st.header("Analizar Nuevo Comentario")
        user_input = st.text_area("Escribe tu comentario sobre el producto:", height=150)
        
        if user_input:
            col1, col2 = st.columns(2)
            with col1:
                with st.spinner("Analizando sentimiento..."):
                    sentiment, score = analyze_sentiment(user_input)
                    st.metric("Sentimiento", f"{sentiment} ({score:.0%} confianza)")
            
            with col2:
                with st.spinner("Generando resumen..."):
                    summary = generate_summary(user_input)
                    st.text_area("Resumen:", value=summary, height=100)
    
    with tab2:
        st.header("Explorar 20 Opiniones de Ejemplo")
        df = pd.DataFrame({'Opini칩n': opiniones})
        
        # An치lisis colectivo
        st.subheader("An치lisis Colectivo")
        option = st.radio("Selecciona an치lisis:", 
                         ["游댌 Temas principales", "游늷 Resumen general", "游늳 Distribuci칩n de sentimientos"])
        
        if option == "游댌 Temas principales":
            all_text = ' '.join(opiniones)
            cleaned = clean_text(all_text)
            wordcloud = WordCloud(width=800, height=400).generate(cleaned)
            plt.figure(figsize=(10, 5))
            plt.imshow(wordcloud)
            plt.axis('off')
            st.pyplot(plt)
            
            # Palabras m치s frecuentes
            words = Counter(cleaned.split()).most_common(10)
            st.write("**Palabras clave m치s frecuentes:**")
            for word, count in words:
                st.write(f"- {word} ({count} veces)")
        
        elif option == "游늷 Resumen general":
            with st.spinner("Generando resumen de todas las opiniones..."):
                combined = " ".join([o[:200] for o in opiniones])  # Limitar longitud
                summary = generate_summary(combined)
                st.write(summary)
        
        elif option == "游늳 Distribuci칩n de sentimientos":
            with st.spinner("Analizando sentimientos..."):
                df['Sentimiento'] = df['Opini칩n'].apply(lambda x: analyze_sentiment(x)[0])
                st.bar_chart(df['Sentimiento'].value_counts())
                
                # Mostrar ejemplos
                st.write("**Ejemplos por categor칤a:**")
                for sentiment in ["Positivo", "Neutral", "Negativo"]:
                    examples = df[df['Sentimiento'] == sentiment]['Opini칩n'].head(2)
                    if not examples.empty:
                        st.write(f"**{sentiment}:**")
                        for example in examples:
                            st.write(f"- {example[:100]}...")

if __name__ == "__main__":
    main()
